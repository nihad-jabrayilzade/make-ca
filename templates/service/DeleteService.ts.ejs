import { Assert } from "@core/shared/util/assert";
import { <%= entity.pascalCase %>Repository } from "@core/domain/<%= entity.kebabCase %>/repository";
import { <%= entity.pascalCase %>UseCasePort, <%= entity.pascalCase %>UseCaseResult, Delete<%= entity.pascalCase %>UseCase } from "@core/domain/<%= entity.kebabCase %>/use-case";
import { <%= entity.pascalCase %>NotFoundException } from "@core/domain/<%= entity.kebabCase %>/exception";

export class Delete<%= entity.pascalCase %>Service implements Delete<%= entity.pascalCase %>UseCase {
  constructor(private readonly <%= entity.camelCase %>Repository: <%= entity.pascalCase %>Repository) {}

  public async execute(port: <%= entity.pascalCase %>UseCasePort.Delete): <%= entity.pascalCase %>UseCaseResult.Delete {
    const <%= entity.camelCase %> = await this.<%= entity.camelCase %>Repository.get<%= entity.pascalCase %>({ id: port.id });

    Assert.notNull(<%= entity.camelCase %>, new <%= entity.pascalCase %>NotFoundException(port.id));

    <%= entity.camelCase %>.delete();
    await this.<%= entity.camelCase %>Repository.delete<%= entity.pascalCase %>(<%= entity.camelCase %>);

    return <%= entity.camelCase %>;
  }
} 