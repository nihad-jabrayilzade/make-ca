import { <%= entity.pascalCase %>Repository } from "@core/domain/<%= entity.kebabCase %>/repository";
import { Delete<%= entity.pascalCase %>UseCasePort, Delete<%= entity.pascalCase %>UseCaseResult, Delete<%= entity.pascalCase %>UseCase } from "@core/domain/<%= entity.kebabCase %>/use-case";
import { <%= entity.pascalCase %>NotFoundException } from "@core/domain/<%= entity.kebabCase %>/exception";

export class Delete<%= entity.pascalCase %>Service implements Delete<%= entity.pascalCase %>UseCase {
  constructor(private readonly <%= entity.camelCase %>Repository: <%= entity.pascalCase %>Repository) {}

  public async execute(port: Delete<%= entity.pascalCase %>UseCasePort): Delete<%= entity.pascalCase %>UseCaseResult {
    const exists = await this.<%= entity.camelCase %>Repository.exists({ id: port.id });
    
    if (!exists) {
      throw new <%= entity.pascalCase %>NotFoundException();
    }

    const result = await this.<%= entity.camelCase %>Repository.delete<%= entity.pascalCase %>(port);

    return result;
  }
} 