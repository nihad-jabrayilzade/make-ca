import { Assert } from "@core/shared/util/assert";
import { NotNullable } from "@core/shared/type";
import { <%= entity.pascalCase %>Repository } from "@core/domain/<%= entity.kebabCase %>/repository";
import { <%= entity.pascalCase %>UseCasePort, <%= entity.pascalCase %>UseCaseResult, Create<%= entity.pascalCase %>UseCase } from "@core/domain/<%= entity.kebabCase %>/use-case";
import { <%= entity.pascalCase %>AlreadyExistsException } from "@core/domain/<%= entity.kebabCase %>/exception";

export class Create<%= entity.pascalCase %>Service implements Create<%= entity.pascalCase %>UseCase {
  constructor(private readonly <%= entity.camelCase %>Repository: <%= entity.pascalCase %>Repository) {}

  public async execute(port: <%= entity.pascalCase %>UseCasePort.Create): <%= entity.pascalCase %>UseCaseResult.Create {
    // REPLACE: Add the required unique field for creating user
    const dummyUniquePropertyFromPort = 10000;

    const exists = await this.<%= entity.camelCase %>Repository.exists({ id: dummyUniquePropertyFromPort });
    Assert.isFalse(exists, new <%= entity.pascalCase %>AlreadyExistsException(dummyUniquePropertyFromPort));

    const result = await this.<%= entity.camelCase %>Repository.create<%= entity.pascalCase %>(port);

    const <%= entity.camelCase %> = await this.<%= entity.camelCase %>Repository.get<%= entity.pascalCase %>({
      id: result.id,
    });

    return <%= entity.camelCase %> as NotNullable<typeof <%= entity.camelCase %>>;
  }
} 