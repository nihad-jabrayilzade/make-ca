import { Assert } from "@core/shared/util/assert";
import { <%= entity.pascalCase %>Repository } from "@core/domain/<%= entity.kebabCase %>/repository";
import { Update<%= entity.pascalCase %>UseCase, Update<%= entity.pascalCase %>UseCaseResult, Update<%= entity.pascalCase %>UseCasePort } from "@core/domain/<%= entity.kebabCase %>/use-case";
import { <%= entity.pascalCase %>NotFoundException } from "@core/domain/<%= entity.kebabCase %>/exception";

export class Update<%= entity.pascalCase %>Service implements Update<%= entity.pascalCase %>UseCase {
  constructor(private readonly <%= entity.camelCase %>Repository: <%= entity.pascalCase %>Repository) {}

  public async execute(port: Update<%= entity.pascalCase %>UseCasePort): Update<%= entity.pascalCase %>UseCaseResult {
    const <%= entity.camelCase %> = await this.<%= entity.camelCase %>Repository.get<%= entity.pascalCase %>({ id: port.id });

    Assert.notNull(<%= entity.camelCase %>, new <%= entity.pascalCase %>NotFoundException(port.id));

    <%= entity.camelCase %>.update(port);
    await this.<%= entity.camelCase %>Repository.update<%= entity.pascalCase %>(<%= entity.camelCase %>);

    return <%= entity.camelCase %>;
  }
} 